Phase 1 - 

General concepts of cards, players and hands:

    Cards (Card class and 52 instances thereof?) can be shuffled and dealt to 4 Player objects
    Concept of a "hand" is created for a Player, with some way to print that in an appropriate fashion to the terminal

Requirements: Create a class representing the game state,
a class representing a deck of cards, and a player class containing a hand of cards.

Will be importing the Random module to allow shuffling and dealing.

Class structure:
Hearts, the game state class, which will make use of the functions from the other sections.

Deck of Cards, containing lists of Suits and Values, which has the functions:
Shuffle, which creates a randomised list of cards
Deal, which deals a hand of cards to a player by popping cards from the deck.

Player will have an identifying feature, and have a hand which will be an empty list,
which we can populate from the cards drawn.


Phase 2
Ability to play cards, 13 "tricks" making a full round:

    Some user interaction such that the user can choose what card to play from their own hand
    "Bot" hands to play a card, chosen randomly for now (restrictions on who can play what, and who leads, to come later)
    Forming of "tricks" - 4 cards, 1 from each player - kept and preserved such that they can belong to a player who won that trick, later on

Requirements:

User to select a card from their hand to "play" it. The three other 'players' will then play a card each. 
Rules surrounding valid plays etc. are *not* to be implemented in this step.
After user plays their card, each other player will play a card. Once a full rotation is complete, the "trick" will be stored
and a new hand begins.
For now, the user will always go first, and the trick will be stored but not assigned to a player.

Structure:
Add a list to player class to accept a Trick whenever one is completed. For now these will all go to the User, later they will be given to the winner.
Accept User Input to play a card. Initally we will accept a number, to select the card, or return an error if the card is not in the hand.
Card will be popped from hand and put into the trick, three other cards will randomly be put in, then the trick will be stored in the players trick library.

Phase 3 - 

Basic rules introduced:

    2 Clubs owner goes first and plays that card first
    Players must follow suit, if possible
    Tricks are won by the player with the highest card of the leading suit (for now)
    Player who won the trick plays first card of next trick

Requirements:

Turn order will be initially given to whomever holds the 2 of Clubs. Play will then progress clockwise 1>2>3>4>1
At the end of each trick, "first_player" will be updated by whomever played the highest value rank in the first player's suit.
Tricks will be passed to the person who won the trick, rather than the user.
Finally, both bots and players will only be allowed to play cards matching the suit of the first player UNLESS they cannot do so, then any card may be played.

Structure:

Replace User going first with a check on all hands for 2 of clubs, making that player the first player and forcing their first play to be the 2 of Clubs.
Create a structure for 1st, 2nd, 3rd, 4th player that will have them play their cards in order, allowing the user to fall into any position.
Check the 'Leading Suit' and then check if that suit exists in each players hand. If it does, only allow them to play that suit, otherwise, let them play anything.
Check for highest value card in the 'Leading Suit', make that player the winner, give them the trick, then make them the first player.

Options for tricks - 
Create a trick class to store logic? Or segment score logic to another document, if expected to be very complex.
Calculate in the main code- set the first player as the winner, then unseat them if another player plays the same suit, but a higher value card. Fine if logic winds up being very short.



** You don't need to know what you're doing or how- but you want to know the behaviour and output**
